import uvicorn
import matplotlib
from fastapi import APIRouter, FastAPI, File, Form, UploadFile, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import Response
from decouple import config, Csv
from pydantic import Json
from pandas import read_csv

from .._models.options import Options
from .._utils.exceptions import InvalidRequestError

from .service import service

# To ensure we can plot in different threads
# https://matplotlib.org/stable/users/faq/howto_faq.html#work-with-threads
# https://matplotlib.org/stable/users/explain/backends.html#selecting-a-backend
matplotlib.use("agg")


def plotter_router():
    plotter_router = APIRouter(prefix="/plotter")

    @plotter_router.post(
        "",
        responses={200: {"content": {"image/png": {}}}},
        # Prevent FastAPI from adding "application/json" as an additional
        # response media type in the autogenerated OpenAPI specification.
        # https://github.com/tiangolo/fastapi/issues/3258
        response_class=Response,
    )
    def plot_request(
        rawData: UploadFile = File(...),
        rawOptions: Json[Options] = Form(...),
    ):
        try:
            data = read_csv(rawData.file, sep=",", index_col=0)
            plot_img = service(data, rawOptions)
        except (InvalidRequestError, ValueError) as e:
            raise HTTPException(status_code=400, detail="Bad request: " + str(e))
        except Exception as e:
            raise HTTPException(status_code=500, detail="Oops my bad: " + str(e))
        return Response(plot_img, media_type="image/png")

    return plotter_router
