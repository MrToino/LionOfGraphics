import os
import matplotlib

from json import load
from jsonschema.exceptions import ValidationError
from fastapi import FastAPI, File, HTTPException
from fastapi.responses import Response

from service import service
from parser import parse_request

from utils.exceptions import InvalidRequestError

# To ensure we can plot in different threads
# https://matplotlib.org/stable/users/faq/howto_faq.html#work-with-threads
# https://matplotlib.org/stable/users/explain/backends.html#selecting-a-backend
matplotlib.use("agg")

with open(os.path.join(".", "schema.json")) as f:
    PLOTTER_OPTIONS_SCHEMA = load(f)

app = FastAPI()


@app.post(
    "/",
    responses={
        200: {"content": {"image/png": {}}}
    },
    # Prevent FastAPI from adding "application/json" as an additional
    # response media type in the autogenerated OpenAPI specification.
    # https://github.com/tiangolo/fastapi/issues/3258
    response_class=Response,
)
def plot_request(
    rawData: bytes = File(),
    rawOptions: bytes = File(),
):
    try:
        data, options = parse_request(rawData, rawOptions, PLOTTER_OPTIONS_SCHEMA)
        plot_img = service(data, options)
    except (InvalidRequestError, ValidationError, ValueError) as e:
        raise HTTPException(status_code=400, detail="Bad request: " + str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail="Oops: " + str(e))
    return Response(plot_img, media_type="image/png")

# to run this app in debug just go to the console and run with
# > uvicorn server:app --reload
