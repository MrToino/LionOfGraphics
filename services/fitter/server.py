from fastapi import FastAPI, File, Form, HTTPException
from fastapi.responses import Response
from jsonschema.exceptions import ValidationError

from service import service
from parser import parse_request

from utils.exceptions import InvalidRequestError


app = FastAPI()


@app.post(
    "/",
    responses={
        200: {"content": {"image/png": {}}}
    },
    # Prevent FastAPI from adding "application/json" as an additional
    # response media type in the autogenerated OpenAPI specification.
    # https://github.com/tiangolo/fastapi/issues/3258
    response_class=Response,
)
def plot_request(
    rawData: bytes = File(),
    rawOptions: bytes = File(),
    rawFunc: str = Form(),
):
    try:
        data, _, _ = parse_request((rawData, rawOptions, rawFunc))
        plot_img = service({"data": data})
    except (InvalidRequestError, ValidationError, ValueError) as e:
        raise HTTPException(status_code=400, detail="Bad request: " + str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail="Oops: " + str(e))
    return Response(plot_img, media_type="image/png")

# to run this app in debug just go to the console and run with
# > uvicorn server:app --reload
